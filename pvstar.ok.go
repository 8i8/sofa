package sofa

// #include "sofa.h"
import "C"
import (
	"math"

	"github.com/8i8/sofa/en"
)

var errPvstar = en.New(2, "Pvstar", []string{
	"null position vector",
	"superluminal speed (Note 5)",
	"",
})

//  CgoPvstar Convert star position+velocity vector to catalog
//  coordinates.
//
//  - - - - - - -
//   P v s t a r
//  - - - - - - -
//
//  This function is part of the International Astronomical Union's
//  SOFA (Standards Of Fundamental Astronomy) software collection.
//
//  Status:  support function.
//
//  Given (Note 1):
//     pv     double[2][3]   pv-vector (au, au/day)
//
//  Returned (Note 2):
//     ra     double         right ascension (radians)
//     dec    double         declination (radians)
//     pmr    double         RA proper motion (radians/year)
//     pmd    double         Dec proper motion (radians/year)
//     px     double         parallax (arcsec)
//     rv     double         radial velocity (km/s, positive = receding)
//
//  Returned (function value):
//            int            status:
//                              0 = OK
//                             -1 = superluminal speed (Note 5)
//                             -2 = null position vector
//
//  Notes:
//
//  1) The specified pv-vector is the coordinate direction (and its rate
//     of change) for the date at which the light leaving the star
//     reached the solar-system barycenter.
//
//  2) The star data returned by this function are "observables" for an
//     imaginary observer at the solar-system barycenter.  Proper motion
//     and radial velocity are, strictly, in terms of barycentric
//     coordinate time, TCB.  For most practical applications, it is
//     permissible to neglect the distinction between TCB and ordinary
//     "proper" time on Earth (TT/TAI).  The result will, as a rule, be
//     limited by the intrinsic accuracy of the proper-motion and
//     radial-velocity data;  moreover, the supplied pv-vector is likely
//     to be merely an intermediate result (for example generated by the
//     function iauStarpv), so that a change of time unit will cancel
//     out overall.
//
//     In accordance with normal star-catalog conventions, the object's
//     right ascension and declination are freed from the effects of
//     secular aberration.  The frame, which is aligned to the catalog
//     equator and equinox, is Lorentzian and centered on the SSB.
//
//     Summarizing, the specified pv-vector is for most stars almost
//     identical to the result of applying the standard geometrical
//     "space motion" transformation to the catalog data.  The
//     differences, which are the subject of the Stumpff paper cited
//     below, are:
//
//     (i) In stars with significant radial velocity and proper motion,
//     the constantly changing light-time distorts the apparent proper
//     motion.  Note that this is a classical, not a relativistic,
//     effect.
//
//     (ii) The transformation complies with special relativity.
//
//  3) Care is needed with units.  The star coordinates are in radians
//     and the proper motions in radians per Julian year, but the
//     parallax is in arcseconds; the radial velocity is in km/s, but
//     the pv-vector result is in au and au/day.
//
//  4) The proper motions are the rate of change of the right ascension
//     and declination at the catalog epoch and are in radians per Julian
//     year.  The RA proper motion is in terms of coordinate angle, not
//     true angle, and will thus be numerically larger at high
//     declinations.
//
//  5) Straight-line motion at constant speed in the inertial frame is
//     assumed.  If the speed is greater than or equal to the speed of
//     light, the function aborts with an error status.
//
//  6) The inverse transformation is performed by the function iauStarpv.
//
//  Called:
//     iauPn        decompose p-vector into modulus and direction
//     iauPdp       scalar product of two p-vectors
//     iauSxp       multiply p-vector by scalar
//     iauPmp       p-vector minus p-vector
//     iauPm        modulus of p-vector
//     iauPpp       p-vector plus p-vector
//     iauPv2s      pv-vector to spherical
//     iauAnp       normalize angle into range 0 to 2pi
//
//  Reference:
//
//     Stumpff, P., 1985, Astron.Astrophys. 144, 232-240.
//
//  This revision:  2017 March 16
//
//  SOFA release 2020-07-21
//
//  Copyright (C) 2020 IAU SOFA Board.  See notes at end.
//
//  CgoPvstar Convert star position+velocity vector to catalog
//  coordinates.
func CgoPvstar(pv [2][3]float64) (ra, dec, pmr, pmd, px, rv float64,
	err en.ErrNum) {

	var cRa, cDec, cPmr, cPmd, cPx, cRv C.double
	cPv := v3dGo2C(pv)
	cI := C.iauPvstar(&cPv[0], &cRa, &cDec, &cPmr, &cPmd, &cPx, &cRv)
	if int(cI) != 0 {
		err = errPvstar.Set(int(cI))
	}

	return float64(cRa), float64(cDec), float64(cPmr),
		float64(cPmd), float64(cPx), float64(cRv), err
}

//  GoPvstar Convert star position+velocity vector to catalog
//  coordinates.
func GoPvstar(pv [2][3]float64) (ra, dec, pmr, pmd, px, rv float64,
	err en.ErrNum) {

	var r, vr, vt, bett, betr, d, w, del, a, rad, decd, rd float64
	var x, ur, ut, usr, ust [3]float64

	// Isolate the radial component of the velocity (au/day,
	// inertial).
	r, x = GoPn(pv[0])
	vr = GoPdp(x, pv[1])
	ur = GoSxp(vr, x)

	// Isolate the transverse component of the velocity (au/day,
	// inertial).
	ut = GoPmp(pv[1], ur)
	vt = GoPm(ut)

	// Special-relativity dimensionless parameters.
	bett = vt / DC
	betr = vr / DC

	// The inertial-to-observed correction terms.
	d = 1.0 + betr
	w = betr*betr + bett*bett
	if d == 0.0 || w > 1.0 {
		err = errPvstar.Set(-1)
		return
	}
	del = -w / (math.Sqrt(1.0-w) + 1.0)

	// Apply relativistic correction factor to radial velocity
	// component.
	if betr != 0 {
		w = (betr - del) / (betr * d)
	}
	usr = GoSxp(w, ur)

	// Apply relativistic correction factor to tangential velocity
	// component.
	ust = GoSxp(1.0/d, ut)

	// Combine the two to obtain the observed velocity vector
	// (au/day).
	pv[1] = GoPpp(usr, ust)

	// Cartesian to spherical.
	a, dec, r, rad, decd, rd = GoPv2s(pv)
	if r == 0.0 {
		err = errPvstar.Set(-2)
		return
	}

	// Return RA in range 0 to 2pi.
	ra = GoAnp(a)

	// Return proper motions in radians per year.
	pmr = rad * DJY
	pmd = decd * DJY

	// Return parallax in arcsec.
	px = DR2AS / r

	// Return radial velocity in km/s.
	rv = 1e-3 * rd * DAU / DAYSEC

	// OK status.
	return
}
